datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL_SECURE")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "jsonProtocol"]
}

/// API Management Enums

enum UserType {
  Admin
  User
}

enum AccessLevel {
  God
  App
  User
  Unauthenticated
}

enum ApiModelStatus {
  Active
  Paused
  Disabled
  Deleted
}

/// Debate Data Enums

enum ElimRoundName {
  Finals
  Semifinals
  Quarterfinals
  Octafinals
  DoubleOctafinals
  TripleOctafinals
  QuadrupleOctafinals
}

enum Event {
  PublicForum
  LincolnDouglas
  Policy
  Parlimentary
}

enum Side {
  Pro
  Con
  Aff
  Neg
  Bye
}

enum RoundOutcome {
  Win
  Loss
  Split
}

enum RoundType {
  Prelim
  Elim
}

enum BidType {
  Full
  Partial
}

/// API Management Models

model User {
  id      String         @id
  type    UserType       @default(User)
  status  ApiModelStatus @default(Active)
  name    String
  email   String?        @unique
  authSub String         @unique @map("auth_sub")
  apiKeys ApiKey[]

  @@map("users")
}

model Product {
  id           Int         @id @default(autoincrement())
  accessLevel  AccessLevel @map("access_level")
  readAllowed  Boolean     @map("read_allowed")
  writeAllowed Boolean     @map("write_allowed")
  rateLimit    Int         @map("rate_limit")
  devPrice     String      @unique @map("dev_price")
  prodPrice    String      @unique @map("prod_price")
  ApiKey       ApiKey[]

  @@map("products")
}

model ApiKey {
  id               String         @id
  role             AccessLevel
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @map("user_id")
  subscription     String         @unique
  subscriptionItem String?        @map("subscription_item")
  product          Product?       @relation(fields: [productId], references: [id])
  productId        Int            @map("product_id")
  status           ApiModelStatus @default(Active)

  @@index([userId])
  @@index([productId])
  @@map("api_keys")
}

/// Debate Data Models

model Season {
  id           Int            @id
  circuits     Circuit[]
  rankings     TeamRanking[]
  tournaments  Tournament[]
  teams        Team[]
  JudgeRanking JudgeRanking[]

  @@map("seasons")
}

model Circuit {
  id           Int            @id @default(autoincrement())
  name         String
  event        Event
  rankings     TeamRanking[]
  tournaments  Tournament[]
  seasons      Season[]
  teams        Team[]
  JudgeRanking JudgeRanking[]

  @@unique([name, event])
  @@index([name])
  @@map("circuits")
}

model TeamRanking {
  id        Int     @id @default(autoincrement())
  season    Season  @relation(fields: [seasonId], references: [id])
  seasonId  Int     @default(2023) @map("season_id")
  team      Team    @relation(fields: [teamId], references: [id])
  teamId    String  @map("team_id")
  otr       Float
  circuit   Circuit @relation(fields: [circuitId], references: [id])
  circuitId Int     @map("circuit_id")

  @@unique([teamId, circuitId, seasonId])
  @@index([teamId])
  @@index([circuitId])
  @@index([seasonId])
  @@map("team_rankings")
}

model JudgeRanking {
  id        Int     @id @default(autoincrement())
  season    Season  @relation(fields: [seasonId], references: [id])
  seasonId  Int     @default(2023) @map("season_id")
  judge     Judge   @relation(fields: [judgeId], references: [id])
  judgeId   String  @map("judge_id")
  index     Float
  circuit   Circuit @relation(fields: [circuitId], references: [id])
  circuitId Int     @map("circuit_id")

  @@unique([judgeId, circuitId, seasonId])
  @@index([judgeId])
  @@index([circuitId])
  @@index([seasonId])
  @@map("judge_rankings")
}

model Tournament {
  id             Int                     @id @default(autoincrement())
  name           String
  start          Int
  end            Int
  event          Event
  tabEventId     Int                     @map("tab_event_id")
  tabTournId     Int                     @map("tab_tourn_id")
  location       String
  isTocQualifier Boolean                 @map("is_toc_qualifier")
  bidLevel       ElimRoundName?          @map("bid_level")
  hasElimRounds  Boolean                 @map("has_elim_rounds")
  boost          Float                   @map("boost")
  season         Season                  @relation(fields: [seasonId], references: [id])
  circuits       Circuit[]
  teamResults    TeamTournamentResult[]
  judgeResults   JudgeTournamentResult[]
  records        JudgeRecord[]
  schools        School[]
  seasonId       Int                     @default(2023) @map("season_id")

  @@unique([tabTournId, tabEventId])
  @@index([seasonId])
  @@fulltext([name])
  @@map("tournaments")
}

model School {
  id          Int                    @id @default(autoincrement())
  name        String                 @unique
  results     TeamTournamentResult[]
  teams       Team[]
  tournaments Tournament[]

  @@fulltext([name])
  @@map("schools")
}

model Competitor {
  id                       String                    @id
  name                     String
  teams                    Team[]
  roundSpeakerResults      RoundSpeakerResult[]
  tournamentSpeakerResults TournamentSpeakerResult[]

  @@fulltext([name])
  @@map("competitors")
}

model Bid {
  id         Int                  @id @default(autoincrement())
  result     TeamTournamentResult @relation(fields: [resultId], references: [id])
  resultId   Int                  @unique @map("result_id")
  team       Team                 @relation(fields: [teamId], references: [id])
  teamId     String               @map("team_id")
  value      BidType
  isGhostBid Boolean              @map("is_ghost_bid")

  @@index([resultId])
  @@index([teamId])
  @@map("bids")
}

model TournamentSpeakerResult {
  id           Int                  @id @default(autoincrement())
  competitor   Competitor           @relation(fields: [competitorId], references: [id])
  competitorId String               @map("competitor_id")
  rawAvgPoints Float                @map("raw_avg_points")
  adjAvgPoints Float                @map("adj_avg_points")
  stdDevPoints Float                @map("std_dev_points")
  result       TeamTournamentResult @relation(fields: [resultId], references: [id])
  resultId     Int                  @map("result_id")

  @@index([competitorId])
  @@index([resultId])
  @@map("tournament_speaker_results")
}

model Alias {
  id      Int                    @id @default(autoincrement())
  code    String
  team    Team                   @relation(fields: [teamId], references: [id])
  teamId  String                 @map("team_id")
  results TeamTournamentResult[]

  @@unique([code, teamId])
  @@index([teamId])
  @@fulltext([code])
  @@map("aliases")
}

model TeamTournamentResult {
  id                Int                       @id @default(autoincrement())
  tournament        Tournament                @relation(fields: [tournamentId], references: [id])
  tournamentId      Int                       @map("tournament_id")
  tabEntryId        Int                       @map("tab_entry_id")
  alias             Alias                     @relation(fields: [aliasId], references: [id])
  prelimPos         Int                       @map("prelim_pos")
  prelimPoolSize    Int                       @map("prelim_pool_size")
  prelimWins        Float                     @map("prelim_wins")
  prelimLosses      Float                     @map("prelim_losses")
  prelimBallotsWon  Int                       @map("prelim_ballots_won")
  prelimBallotsLost Int                       @map("prelim_ballots_lost")
  elimWins          Int?                      @map("elim_wins")
  elimLosses        Int?                      @map("elim_losses")
  elimBallotsWon    Int?                      @map("elim_ballots_won")
  elimBallotsLost   Int?                      @map("elim_ballots_lost")
  school            School                    @relation(fields: [schoolId], references: [id])
  opWpM             Float                     @map("op_wp_m")
  rounds            Round[]
  otrComp           Float                     @map("otr_comp")
  team              Team                      @relation(fields: [teamId], references: [id])
  teamId            String                    @map("team_id")
  speaking          TournamentSpeakerResult[]
  aliasId           Int                       @map("alias_id")
  schoolId          Int                       @map("school_id")
  bid               Bid?

  @@unique([teamId, tabEntryId])
  @@index([tournamentId])
  @@index([teamId])
  @@index([aliasId])
  @@index([schoolId])
  @@map("team_tournament_results")
}

model RoundSpeakerResult {
  id           Int        @id @default(autoincrement())
  competitor   Competitor @relation(fields: [competitorId], references: [id])
  competitorId String     @map("competitor_id")
  points       Float
  round        Round      @relation(fields: [roundId], references: [id])
  roundId      String     @map("round_id")
  judge        Judge      @relation(fields: [judgeId], references: [id])
  judgeId      String

  @@index([competitorId])
  @@index([roundId])
  @@index([judgeId])
  @@map("round_speaker_results")
}

model Round {
  id          String               @id @default(uuid())
  name        String
  type        RoundType
  side        Side
  nameStd     String               @map("name_std")
  outcome     RoundOutcome
  ballotsWon  Int                  @map("ballots_won")
  ballotsLost Int                  @map("ballots_lost")
  opponent    Team?                @relation(fields: [opponentId], references: [id])
  opponentId  String?              @map("opponent_id")
  result      TeamTournamentResult @relation(fields: [resultId], references: [id])
  resultId    Int                  @map("result_id")
  records     JudgeRecord[]
  speaking    RoundSpeakerResult[]

  @@index([resultId])
  @@index([opponentId])
  @@map("rounds")
}

model Team {
  id             String                 @id
  competitors    Competitor[]
  results        TeamTournamentResult[]
  rounds         Round[]
  aliases        Alias[]
  rankings       TeamRanking[]
  allRecords     JudgeRecord[]          @relation(name: "AllJudgeRecords")
  winningRecords JudgeRecord[]          @relation(name: "WinningJudgeRecords")
  circuits       Circuit[]
  seasons        Season[]
  schools        School[]
  bids           Bid[]

  @@map("teams")
}

model Judge {
  id       String                  @id
  name     String
  results  JudgeTournamentResult[]
  records  JudgeRecord[]
  speaking RoundSpeakerResult[]
  rankings JudgeRanking[]

  @@fulltext([name])
  @@map("judges")
}

model JudgeTournamentResult {
  id              Int           @id @default(autoincrement())
  judge           Judge         @relation(fields: [judgeId], references: [id])
  judgeId         String        @map("judge_id")
  tabTournId      Int           @map("tab_tourn_id")
  tabEventId      Int           @map("tab_event_id")
  tabJudgeId      Int           @map("tab_judge_id")
  avgRawPoints    Float?        @map("avg_raw_points")
  avgAdjPoints    Float?        @map("avg_adj_points")
  stdDevPoints    Float?        @map("std_dev_points")
  numPrelims      Int
  numPrelimScrews Float?        @map("num_prelim_screws")
  numElims        Int?
  numSquirrels    Int?          @map("num_squirrels")
  numAff          Int?          @map("num_aff")
  numNeg          Int?          @map("num_neg")
  numPro          Int?          @map("num_pro")
  numCon          Int?          @map("num_con")
  records         JudgeRecord[]
  tournament      Tournament?   @relation(fields: [tournamentId], references: [id])
  tournamentId    Int?          @map("tournament_id")

  @@unique([tabTournId, tabEventId, tabJudgeId])
  @@index([judgeId])
  @@index([tournamentId])
  @@map("judge_tournament_results")
}

model JudgeRecord {
  id               Int                   @id @default(autoincrement())
  decision         Side
  avgSpeakerPoints Float?
  wasSquirrel      Boolean?
  judge            Judge                 @relation(fields: [judgeId], references: [id])
  judgeId          String
  teams            Team[]                @relation(name: "AllJudgeRecords")
  winner           Team                  @relation(name: "WinningJudgeRecords", fields: [winnerId], references: [id])
  winnerId         String
  rounds           Round[]
  type             RoundType
  event            Event
  tournament       Tournament            @relation(fields: [tournamentId], references: [id])
  tournamentId     Int
  result           JudgeTournamentResult @relation(fields: [resultId], references: [id])
  resultId         Int

  @@index([tournamentId])
  @@index([judgeId])
  @@index([resultId])
  @@index([winnerId])
  @@map("judge_records")
}
